import telebot
from telebot import types
import random
import re
import matplotlib.pyplot as plt
from io import BytesIO
import time
import requests
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("7912214308:AAGd1JeeEqBNoXsn7VpQ6NUh1yAQn9m74EE")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DeepSeek API
DEEPSEEK_API_KEY = "sk-26164f96ebb94b4186689d9d355ba324"
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
headers = {
    "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
    "Content-Type": "application/json"
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def clean_markdown(text):
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (### –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –ó–∞–≥–æ–ª–æ–≤–æ–∫)
    text = re.sub(r'#+\s*(.*)', r'\1', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ –∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (**–∂–∏—Ä–Ω—ã–π** ‚Üí –∂–∏—Ä–Ω—ã–π, *–∫—É—Ä—Å–∏–≤* ‚Üí –∫—É—Ä—Å–∏–≤)
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'\*(.*?)\*', r'\1', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ([—Ç–µ–∫—Å—Ç](URL) ‚Üí —Ç–µ–∫—Å—Ç)
    text = re.sub(r'\[(.*?)\]\(.*?\)', r'\1', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (![alt](URL) ‚Üí alt (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ))
    text = re.sub(r'!\[(.*?)\]\(.*?\)', r'\1', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ (```–∫–æ–¥``` ‚Üí –∫–æ–¥)
    text = re.sub(r'```.*?\n(.*?)\n```', r'\1', text, flags=re.DOTALL)
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞ (`–∫–æ–¥` ‚Üí –∫–æ–¥)
    text = re.sub(r'`(.*?)`', r'\1', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    text = re.sub(r'<.*?>', '', text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (---, ***)
    text = re.sub(r'^[-*]{3,}$', '', text, flags=re.MULTILINE)
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (- –ø—É–Ω–∫—Ç ‚Üí –ø—É–Ω–∫—Ç)
    text = re.sub(r'^[-*+]\s+(.*)', r'\1', text, flags=re.MULTILINE)
    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (1. –ø—É–Ω–∫—Ç ‚Üí –ø—É–Ω–∫—Ç)
    text = re.sub(r'^\d+\.\s+(.*)', r'\1', text, flags=re.MULTILINE)
    # –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ—á–Ω—ã—Ö —Ü–∏—Ç–∞—Ç (> —Ü–∏—Ç–∞—Ç–∞ ‚Üí —Ü–∏—Ç–∞—Ç–∞)
    text = re.sub(r'^>\s*(.*)', r'\1', text, flags=re.MULTILINE)
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (Markdown —Ç–∞–±–ª–∏—Ü—ã)
    text = re.sub(r'^\|.*\|$', '', text, flags=re.MULTILINE)
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    text = re.sub(r'\n\s*\n', '\n', text)
    text = text.strip()
    
    return text

def send_resources(message, resource_type=None):
    chat_id = message.chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
    buttons = [
        types.InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="resources_films"),
        types.InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="resources_books"),
        types.InlineKeyboardButton("üßò –¢–µ—Ö–Ω–∏–∫–∏", callback_data="resources_techniques"),
        types.InlineKeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", callback_data="resources_emergency"),
        types.InlineKeyboardButton("üéß –ü–æ–¥–∫–∞—Å—Ç—ã", callback_data="resources_podcasts")
    ]
    markup.add(*buttons)

    # –ï—Å–ª–∏ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ —É–∂–µ —É–∫–∞–∑–∞–Ω (–ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö)
    if resource_type:
        return send_specific_resource(message, resource_type)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
    resources_text = (
        "üìö **–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã** üìö\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n\n"
        "‚Ä¢ **–§–∏–ª—å–º—ã** - –ø–æ–¥–±–æ—Ä–∫–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è\n"
        "‚Ä¢ **–ö–Ω–∏–≥–∏** - –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —Å–∞–º–æ–ø–æ–º–æ—â–∏\n"
        "‚Ä¢ **–¢–µ—Ö–Ω–∏–∫–∏** - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏\n"
        "‚Ä¢ **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å** - –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n"
        "‚Ä¢ **–ü–æ–¥–∫–∞—Å—Ç—ã** - –∞—É–¥–∏–æ—Ä–µ—Å—É—Ä—Å—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏"
    )

    bot.send_message(
        chat_id,
        resources_text,
        reply_markup=markup,
        parse_mode='markdown'
    )


def send_specific_resource(message, resource_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    chat_id = message.chat.id
    
    if resource_type == "films":
        response = (
            "üé¨ **–¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è**:\n\n"
            "1. __–û–±—â–µ—Å—Ç–≤–æ –º—ë—Ä—Ç–≤—ã—Ö –ø–æ—ç—Ç–æ–≤__ (1989) - –æ —Å–≤–æ–±–æ–¥–µ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
            "2. __–•–æ—Ä–æ—à–æ –±—ã—Ç—å —Ç–∏—Ö–æ–Ω–µ–π__ (2012) - –ø—Ä–æ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤—É—é –¥–µ–ø—Ä–µ—Å—Å–∏—é\n"
            "3. __–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞__ (2015) - –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —ç–º–æ—Ü–∏–∏\n"
            "4. __–ß—É–¥–æ__ (2017) - –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–µ–±—è\n\n"
            "üìå –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!"
        )
        
    elif resource_type == "books":
        response = (
            "üìö **–ö–Ω–∏–≥–∏ –ø–æ —Å–∞–º–æ–ø–æ–º–æ—â–∏**:\n\n"
            "‚Ä¢ __–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å__ - –ö–µ–≤–∏–Ω –õ—é–∫\n"
            "‚Ä¢ __–ö —Å–µ–±–µ –Ω–µ–∂–Ω–æ__ - –û–ª—å–≥–∞ –ü—Ä–∏–º–∞—á–µ–Ω–∫–æ\n"
            "‚Ä¢ __–¢–æ–Ω–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ –ø–æ—Ñ–∏–≥–∏–∑–º–∞__ - –ú–∞—Ä–∫ –ú—ç–Ω—Å–æ–Ω\n\n"
            "üí° –ú–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö"
        )
        
    elif resource_type == "techniques":
        response = (
            "üßò **–¢–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏**:\n\n"
            "1. **–î—ã—Ö–∞–Ω–∏–µ 4-7-8** - –≤–¥–æ—Ö 4 —Å–µ–∫, –∑–∞–¥–µ—Ä–∂–∫–∞ 7, –≤—ã–¥–æ—Ö 8\n"
            "2. **–ú–µ—Ç–æ–¥ 5-4-3-2-1** - –∑–∞–∑–µ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ä–≥–∞–Ω—ã —á—É–≤—Å—Ç–≤\n"
            "3. **–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏** - 3 —Ö–æ—Ä–æ—à–∏–µ –≤–µ—â–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:"
        )
        
    elif resource_type == "emergency":
        response = (
            "üÜò **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å**:\n\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: **8-800-2000-122**\n"
            "‚Ä¢ –ö—Ä–∏–∑–∏—Å–Ω—ã–π —á–∞—Ç: **https://–ø–æ–º–æ—â—å—Ä—è–¥–æ–º.—Ä—Ñ**\n"
            "‚Ä¢ –ú–ß–° –†–æ—Å—Å–∏–∏: **112** (—Å–∫–∞–∂–∏ '–Ω—É–∂–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥')\n\n"
            "–¢—ã –Ω–µ –æ–¥–∏–Ω! –û–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø–æ–º–æ—â—å—é."
        )
    elif resource_type == "podcasts":
        response = (
            "üéß **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã**:\n\n"
            "1. __–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö__ - –∞–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —á–µ—Ä–µ–∑ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫—É\n"
            "2. __–ü–æ–¥–∫–∞—Å—Ç '–¢—ã –Ω–µ –æ–¥–∏–Ω'__ - –æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤\n"
            "3. __Brain Science__ - –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)\n\n"
            "–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:"
        )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—É—Ä—Å–∞–º"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—É—Ä—Å–∞–º", callback_data="resources_back"))

    bot.send_message(
        chat_id,
        response,
        reply_markup=markup,
        parse_mode='markdown'
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('resources_'))
def handle_resources_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    resource_type = call.data.split('_')[1]
    
    if resource_type == "back":
        send_resources(call.message)
    else:
        send_specific_resource(call.message, resource_type)
    
    bot.answer_callback_query(call.id)

def send_welcome(message):
    chat_id = message.chat.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id] = {
        "chat_history": [],
        "current_method": None,
        "self_char_answers": {},
        "mood_history": [],
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    buttons = [
        types.KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
        types.KeyboardButton("üßò –¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏"),
        types.KeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"),
        types.KeyboardButton("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤"),
        types.KeyboardButton("üìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–∏–≥–∏"),
        types.KeyboardButton("üéß –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã"),
        types.KeyboardButton("üôè –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"),
        types.KeyboardButton("‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏"),
        types.KeyboardButton("üß† –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ EQ"),
        types.KeyboardButton("üé® –ê—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è")
    ]
    
    markup.add(*buttons)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
        "‚Ä¢ **–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ **–¢–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏** - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏\n"
        "‚Ä¢ **–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å** - –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π\n"
        "‚Ä¢ **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã** - –∫–Ω–∏–≥–∏, —Ñ–∏–ª—å–º—ã, –ø–æ–¥–∫–∞—Å—Ç—ã\n"
        "‚Ä¢ **–ü—Ä–∞–∫—Ç–∏–∫–∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è** - –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏, –∞—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è, EQ-—Ç—Ä–µ–Ω–∏–Ω–≥\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç."
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
    try:
        bot.send_sticker(chat_id, "CAACAgIAAxkBAAEL...")  # ID —Å—Ç–∏–∫–µ—Ä–∞
    except:
        pass  # –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(
        chat_id,
        welcome_text,
        reply_markup=markup,
        parse_mode='markdown'
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    quick_markup = types.InlineKeyboardMarkup()
    quick_markup.add(
        types.InlineKeyboardButton("üòä –•–æ—Ä–æ—à–æ", callback_data="mood_good"),
        types.InlineKeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="mood_normal"),
        types.InlineKeyboardButton("üòî –ü–ª–æ—Ö–æ", callback_data="mood_bad")
    )
    
    bot.send_message(
        chat_id,
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=quick_markup,
        parse_mode='markdown'
    )

def query_deepseek(prompt, chat_history=None):
    """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
    messages = [
        {
            "role": "system",
            "content": """–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤. 
            –ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, –Ω–µ –æ—Å—É–∂–¥–∞–π, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏. 
            –í–∞–∂–Ω–æ: –ø—Ä–∏ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª—è—Ö –¥–∞–π –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏. –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ markdown —Ä–∞–∑–º–µ—Ç–∫—É."""
        }
    ]
    
    if chat_history:
        messages.extend(chat_history)
    
    messages.append({"role": "user", "content": prompt})
    
    data = {
        "model": "deepseek-chat",
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 500
    }
    
    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, data=json.dumps(data))
        result = response.json()
        return result['choices'][0]['message']['content']
    except Exception as e:
        print(f"DeepSeek API error: {e}")
        return None

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ RESOURCES_DB)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
RESOURCES_DB = {
    "books": [
        {
            "id": 1,
            "title": "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å",
            "author": "–ö–µ–≤–∏–Ω –õ—é–∫",
            "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ",
            "tags": ["—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞"]
        },
        {
            "id": 2,
            "title": "–ö —Å–µ–±–µ –Ω–µ–∂–Ω–æ",
            "author": "–û–ª—å–≥–∞ –ü—Ä–∏–º–∞—á–µ–Ω–∫–æ",
            "description": "–†–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å –ø–æ —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏—é –∏ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ",
            "tags": ["—Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–µ", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Å–∞–º–æ–ø–æ–º–æ—â—å"]
        }
    ],
    "films": [
        {
            "id": 1,
            "title": "–û–±—â–µ—Å—Ç–≤–æ –º—ë—Ä—Ç–≤—ã—Ö –ø–æ—ç—Ç–æ–≤",
            "year": 1989,
            "description": "–§–∏–ª—å–º –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–µ–≥–æ –ø—É—Ç–∏",
            "tags": ["—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"]
        },
        {
            "id": 2,
            "title": "–ß—É–¥–æ",
            "year": 2017,
            "description": "–ò—Å—Ç–æ—Ä–∏—è –º–∞–ª—å—á–∏–∫–∞ —Å –ª–∏—Ü–µ–≤–æ–π –∞–Ω–æ–º–∞–ª–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–µ–±—è",
            "tags": ["–±—É–ª–ª–∏–Ω–≥", "–ø—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è"]
        }
    ],
    "techniques": [
        {
            "id": 1,
            "name": "–î—ã—Ö–∞–Ω–∏–µ 4-7-8",
            "description": "–¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏",
            "steps": "1. –í–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å 4 —Å–µ–∫—É–Ω–¥—ã\n2. –ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥\n3. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç 8 —Å–µ–∫—É–Ω–¥",
            "tags": ["—Ç—Ä–µ–≤–æ–≥–∞", "—Å—Ç—Ä–µ—Å—Å"]
        },
        {
            "id": 2,
            "name": "–ú–µ—Ç–æ–¥ 5-4-3-2-1",
            "description": "–¢–µ—Ö–Ω–∏–∫–∞ –∑–∞–∑–µ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫–∞—Ö",
            "steps": "–ù–∞–∑–æ–≤–∏—Ç–µ:\n5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç–µ\n4 –∫–æ—Ç–æ—Ä—ã–µ –æ—â—É—â–∞–µ—Ç–µ\n3 —Å–ª—ã—à–∏—Ç–µ\n2 –Ω—é—Ö–∞–µ—Ç–µ\n1 –ø—Ä–æ–±—É–µ—Ç–µ",
            "tags": ["–ø–∞–Ω–∏–∫–∞", "–∑–∞–∑–µ–º–ª–µ–Ω–∏–µ"]
        }
    ],
    "podcasts": [
        {
            "id": 1,
            "title": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞—Ö",
            "description": "–ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∏ –∏ —Å–æ—Ü–∏–æ–ª–æ–≥–∏–∏",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://example.com/1",
                "Spotify": "https://example.com/2"
            }
        },
        {
            "id": 2,
            "title": "–ü–æ–¥–∫–∞—Å—Ç '–¢—ã –Ω–µ –æ–¥–∏–Ω'",
            "description": "–û –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤",
            "links": {
                "Apple Podcasts": "https://example.com/3",
                "Google Podcasts": "https://example.com/4"
            }
        },
        {
            "id": 4,
            "title": "–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã —ç—Ç–æ —Å–∫–∞–∑–∞–ª–∏",
            "description": "–ò—Å–∫—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ '–Ω–µ—É–¥–æ–±–Ω—ã—Ö' —Ç–µ–º–∞—Ö",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/11558002",
                "SoundCloud": "https://soundcloud.com/goodyousaidit"
            }
        },
        {
            "id": 5,
            "title": "–°—Ç—ã–¥–Ω–æ",
            "description": "–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/8865119",
                "Castbox": "https://castbox.fm/channel/%D0%A1%D1%82%D1%8B%D0%B4%D0%BD%D0%BE-id2130444"
            }
        },
        {
            "id": 6,
            "title": "–≠—Ç–æ –ø—Ä–æ–π–¥–µ—Ç",
            "description": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/10177502",
                "Apple Podcasts": "https://podcasts.apple.com/ru/podcast/%D1%8D%D1%82%D0%BE-%D0%BF%D1%80%D0%BE%D0%B9%D0%B4%D0%B5%D1%82/id1475228816"
            }
        },
        {
            "id": 7,
            "title": "–ß–∞–π —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º",
            "description": "–†–∞–∑–±–æ—Ä –∂–∏—Ç–µ–π—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/9534864",
                "Spotify": "https://open.spotify.com/show/0vRrL5f6hKwhuZl5e0q4fP"
            }
        },
        {
            "id": 8,
            "title": "–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã",
            "description": "–ü–æ–¥–∫–∞—Å—Ç –æ —Å–ª–æ–∂–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/8848539"
            }
        },
        {
            "id": 9,
            "title": "–ú—ã –Ω–µ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏",
            "description": "–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ –Ω–µ–¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—è—Ö –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
            "links": {
                "–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞": "https://music.yandex.ru/album/10704202"
            }
        }
    ],
    
    "gratitude_exercises": [
        {
            "id": 3,
            "title": "–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
            "steps": [
                "1. –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã",
                "2. –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è, –Ω–æ –∏ —á—É–≤—Å—Ç–≤–∞",
                "3. –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
            ]
        }
    ],
        
    "affirmations": {
        "confidence": [
            "–Ø –¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏ –∏ —É–≤–∞–∂–µ–Ω–∏—è",
            "–ú–æ–∏ –æ—à–∏–±–∫–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –º–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å"
        ],
        "anxiety": [
            "–Ø –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å",
            "–ú–æ–∏ —Ç—Ä–µ–≤–æ–≥–∏ - –ø—Ä–æ—Å—Ç–æ –º—ã—Å–ª–∏, –Ω–µ —Ñ–∞–∫—Ç—ã"
        ]
    },
    "emotional_intelligence": [
        {
            "id": 1,
            "title": "–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —ç–º–æ—Ü–∏—é'",
            "description": "–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ª–∏—Ü–∞ –ª—é–¥–µ–π –≤ —Ñ–∏–ª—å–º–∞—Ö –±–µ–∑ –∑–≤—É–∫–∞ –∏ —É–≥–∞–¥—ã–≤–∞–π—Ç–µ —ç–º–æ—Ü–∏–∏"
        }
    ],
    "art_therapy": [
        {
            "id": 1,
            "title": "–†–∏—Å–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π",
            "description": "–ò–∑–æ–±—Ä–∞–∑–∏—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏"
        }
    ]
}



def recommend_resources(user_state):
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    recommended = {"books": [], "films": [], "techniques": [], "podcasts": []}
    
    if "—Ç—Ä–µ–≤–æ–∂" in user_state.lower():
        recommended["books"] = [b for b in RESOURCES_DB["books"] if "—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å" in b["tags"]]
        recommended["techniques"] = [t for t in RESOURCES_DB["techniques"] if "—Ç—Ä–µ–≤–æ–≥–∞" in t["tags"]]
        recommended["podcasts"] = RESOURCES_DB["podcasts"][:1]  # –ü–µ—Ä–≤—ã–π –ø–æ–¥–∫–∞—Å—Ç
    
    if "–±—É–ª–ª–∏–Ω–≥" in user_state.lower():
        recommended["films"] = [f for f in RESOURCES_DB["films"] if "–±—É–ª–ª–∏–Ω–≥" in f["tags"]]
        recommended["books"] = [b for b in RESOURCES_DB["books"] if "—Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞" in b["tags"]]
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ
    if not any(recommended.values()):
        recommended["books"] = RESOURCES_DB["books"][:2]
        recommended["films"] = RESOURCES_DB["films"][:2]
        recommended["techniques"] = RESOURCES_DB["techniques"][:2]
        recommended["podcasts"] = RESOURCES_DB["podcasts"][:1]
    
    return recommended

def send_resource_details(chat_id, resource_type, resource_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Å—É—Ä—Å–µ"""
    resource = next((r for r in RESOURCES_DB[resource_type] if r["id"] == resource_id), None)
    if not resource:
        return False

    if resource_type == "books":
        text = (
            f"üìñ **{resource['title']}**\n"
            f"–ê–≤—Ç–æ—Ä: {resource['author']}\n\n"
            f"{resource['description']}\n\n"
            "–•–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?"
        )
    elif resource_type == "films":
        text = (
            f"üé¨ **{resource['title']}** ({resource['year']})\n\n"
            f"{resource['description']}\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!"
        )
    elif resource_type == "techniques":
        text = (
            f"üß† **{resource['name']}**\n\n"
            f"{resource['description']}\n\n"
            f"**–ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:**\n{resource['steps']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )
    elif resource_type == "podcasts":
        links_text = "\n".join([f"{platform}: {url}" for platform, url in resource["links"].items()])
        text = (
            f"üéß **{resource['title']}**\n\n"
            f"{resource['description']}\n\n"
            f"**–°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:**\n{links_text}"
        )

    markup = types.InlineKeyboardMarkup()
    if resource_type != "techniques" and resource_type != "podcasts":
        markup.add(types.InlineKeyboardButton(
            "–û–±—Å—É–¥–∏—Ç—å", 
            callback_data=f"discuss_{resource_type}_{resource_id}"
        ))
    markup.add(types.InlineKeyboardButton(
        "‚Üê –ù–∞–∑–∞–¥", 
        callback_data=f"back_to_{resource_type}"
    ))

    bot.send_message(
        chat_id,
        text,
        reply_markup=markup,
        parse_mode='markdown'
    )
    return True

def send_resource_list(chat_id, resource_type):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    resources = RESOURCES_DB.get(resource_type, [])
    if not resources:
        bot.send_message(chat_id, "–†–µ—Å—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    markup = types.InlineKeyboardMarkup()
    for r in resources[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        btn_text = ""
        if resource_type == "books":
            btn_text = f"{r['title']} - {r['author']}"
        elif resource_type == "films":
            btn_text = f"{r['title']} ({r['year']})"
        elif resource_type == "techniques":
            btn_text = f"{r['name']}"
        elif resource_type == "podcasts":
            btn_text = f"{r['title']}"
            
        markup.add(types.InlineKeyboardButton(
            btn_text,
            callback_data=f"show_{resource_type}_{r['id']}"
        ))

    type_names = {
        "books": "üìö –ö–Ω–∏–≥–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏",
        "films": "üé¨ –§–∏–ª—å–º—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è",
        "techniques": "üßò –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏",
        "podcasts": "üéß –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã"
    }

    bot.send_message(
        chat_id,
        f"{type_names[resource_type]}:\n–í—ã–±–µ—Ä–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=markup,
        parse_mode='markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_'))
def handle_show_resource(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Å—É—Ä—Å–∞"""
    _, resource_type, resource_id = call.data.split('_')
    send_resource_details(call.message.chat.id, resource_type, int(resource_id))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_'))
def handle_back_to_list(call):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤"""
    resource_type = call.data.split('_')[2]
    send_resource_list(call.message.chat.id, resource_type)
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.text in ["üìö –ö–Ω–∏–≥–∏", "üé¨ –§–∏–ª—å–º—ã", "üßò –¢–µ—Ö–Ω–∏–∫–∏", "üéß –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã"])
def handle_resource_request(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    resource_types = {
        "üìö –ö–Ω–∏–≥–∏": "books",
        "üé¨ –§–∏–ª—å–º—ã": "films",
        "üßò –¢–µ—Ö–Ω–∏–∫–∏": "techniques",
        "üéß –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã": "podcasts"
    }
    send_resource_list(message.chat.id, resource_types[message.text])

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@bot.message_handler(func=lambda m: m.text == "üôè –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å")
def send_gratitude_exercises(message):
    exercise = random.choice(RESOURCES_DB["gratitude_exercises"])
    
    bot.send_message(
        message.chat.id,
        f"üôè {exercise['title']}:\n\n" + "\n".join(exercise["steps"])
    )

@bot.message_handler(func=lambda m: m.text == "‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏")
def send_affirmation(message):
    category = "confidence" if random.random() > 0.5 else "anxiety"
    affirmation = random.choice(RESOURCES_DB["affirmations"][category])
    
    bot.send_message(
        message.chat.id,
        f"‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –¥–Ω—è:\n\n{affirmation}\n\n"
        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ä–∞–∑ –≤—Å–ª—É—Ö –∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –∑–∞–º–µ—Ç–∫–∏"
    )

@bot.message_handler(func=lambda m: m.text == "üß† –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ EQ")
def send_eq_exercise(message):
    exercise = random.choice(RESOURCES_DB["emotional_intelligence"])
    
    bot.send_message(
        message.chat.id,
        f"üß† –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise['title']}':\n\n{exercise['description']}"
    )

@bot.message_handler(func=lambda m: m.text == "üé® –ê—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è")
def send_art_task(message):
    task = random.choice(RESOURCES_DB["art_therapy"])
    
    bot.send_message(
        message.chat.id,
        f"üé® –ê—Ä—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task['title']}\n\n{task['description']}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
    )

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        send_welcome(message)
        return
    
    current_method = user_data[chat_id].get("current_method")
    
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ç–µ—Å—Ç —Å–∞–º–æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if current_method == "self_characteristics":
        questions = list(self_characteristics.keys())
        answered = user_data[chat_id]["self_char_answers"].keys()
        
        for q in questions:
            if q not in answered:
                user_data[chat_id]["self_char_answers"][q] = message.text
                send_next_self_test_question(chat_id)
                return
    
    # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏
    if any(word in message.text.lower() for word in ["—É–º—Ä—É", "–ø–æ–∫–æ–Ω—á—É", "—Å—É–∏—Ü–∏–¥", "—É–±–∏—Ç—å —Å–µ–±—è"]):
        send_emergency_help(message)
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    chat_history = user_data[chat_id].get("chat_history", [])
    
    # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek API
    bot.send_chat_action(chat_id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    context = ""
    if current_method == "problem_situation":
        context = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∑–∞–¥–∞–≤–∞—è —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    
    response = query_deepseek(f"{context}\n{message.text}", chat_history)
    
    if not response:
        response = "–ò–∑–≤–∏–Ω–∏, —è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    response = clean_markdown(response)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
    chat_history.append({"role": "user", "content": message.text})
    chat_history.append({"role": "assistant", "content": response})
    user_data[chat_id]["chat_history"] = chat_history[-5:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    bot.send_message(chat_id, response, parse_mode='markdown')
    
    # –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏–∫ - –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏–º–µ—Ä
    if "–¥—ã—Ö–∞–Ω–∏–µ" in response.lower():
        bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫—É 4-7-8:\n1. –í–¥–æ—Ö 4 —Å–µ–∫\n2. –ó–∞–¥–µ—Ä–∂–∫–∞ 7 —Å–µ–∫\n3. –í—ã–¥–æ—Ö 8 —Å–µ–∫")
    
    # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—è - –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ—Å—É—Ä—Å—ã
    if any(word in response.lower() for word in ["–¥–µ–ø—Ä–µ—Å—Å–∏—è", "—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–±—É–ª–ª–∏–Ω–≥", "—Å—Ç—Ä–µ—Å—Å"]):
        recommended = recommend_resources(response.lower())
        if recommended["books"] or recommended["films"] or recommended["techniques"] or recommended["podcasts"]:
            markup = types.InlineKeyboardMarkup(row_width=2)
            buttons = []
            
            if recommended["books"]:
                buttons.append(types.InlineKeyboardButton("üìö –ö–Ω–∏–≥–∏", callback_data="back_to_books"))
            if recommended["films"]:
                buttons.append(types.InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="back_to_films"))
            if recommended["techniques"]:
                buttons.append(types.InlineKeyboardButton("üßò –¢–µ—Ö–Ω–∏–∫–∏", callback_data="back_to_techniques"))
            if recommended["podcasts"]:
                buttons.append(types.InlineKeyboardButton("üéß –ü–æ–¥–∫–∞—Å—Ç—ã", callback_data="back_to_podcasts"))
            
            markup.add(*buttons)
            
            bot.send_message(
                chat_id,
                "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ –±—É–¥—É—Ç –ø–æ–ª–µ–∑–Ω—ã —ç—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã:",
                reply_markup=markup,
                parse_mode='markdown'
            )

bot.infinity_polling()